Platform: Android
Package Name: com.huawei.android.airsharing
Package Version Name: 4.0.64
Package Version Code: 4064
Min Sdk: 11
Target Sdk: 17
MD5   : a47f200c218c47dfcb8a1cc92c7862df
SHA1  : cff7236111f632eeb31406b97b061587677e6f9a
SHA256: 9f5310687e7bba102e555db4411265753629408b1b8b4e8d85f9009b00113c4c
SHA512: e9c4c808f0dc33dd1d22a10290e0bac2d862c3eee83c75ab765a470aed148c5ae051a0b85974e53f0e5b33a62e19a95fe9124d8a9d6c08639a32e4f452094429
Analyze Signature: fcdb7acdde939c1454d0107e8392bffdd2ad6e7879ba70a318a8200926c8b594b1b915182c0036f0b3785cb23dacb7af3ef491422e13e9c646317c7d75cf4785
------------------------------------------------------------------------------------------------
[Critical] <Command> Runtime Command Checking:
           This app is using critical function 'Runtime.getRuntime().exec("...")'.
           Please confirm these following code secions are not harmful:
               => Lcom/huawei/android/airsharing/service/ScreenSharingManager;->changeFileAccess(Ljava/lang/String;)V (0xb4) --->
                    Ljava/lang/Runtime;->exec(Ljava/lang/String;)Ljava/lang/Process;
               => Lcom/huawei/android/airsharing/util/ExcuteCommand;->run()V (0x20) --->
                    Ljava/lang/Runtime;->exec(Ljava/lang/String;)Ljava/lang/Process;
[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total:1):
               http://127.0.0.1
                   => Lcom/huawei/android/multiscreen/dlna/sdk/xml/SaxHandler/ItemHandler;->endElement(Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String;)V
[Critical]  AndroidManifest System Use Permission Checking:
           This app should only be released and signed by device manufacturer or Google and put under '/system/app'. If not, it may be a
           malicious app.
               System use-permission found: "android.permission.WRITE_SECURE_SETTINGS"
[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Lcom/huawei/android/airsharing/service/ScreenSharingManager;-><clinit>()V (0x28) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/huawei/android/airsharing/service/ScreenSharingManager;->startServer(Ljava/lang/String; Ljava/lang/String;)Z (0xbe)
                    ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/huawei/android/airsharing/version/VesionManager;->makeStorageDir()Ljava/lang/String; (0x18) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
[Warning]  AndroidManifest Exported Components Checking:
           Found "exported" components(except for Launcher) for receiving outside applications' actions (AndroidManifest.xml).
                   These components can be initilized by other apps. You should add or modify the attribute to [exported="false"] if you
           don't want to.
                   You can also protect it with a customized permission with "signature" or higher protectionLevel and specify in
           "android:permission" attribute.
                 activity => com.huawei.android.airsharing.player.DeviceListActivity
[Warning] <Sensitive_Information> Getting ANDROID_ID:
           This app has code getting the 64-bit number "Settings.Secure.ANDROID_ID".
                   ANDROID_ID seems a good choice for a unique device identifier. There are downsides: First, it is not 100% reliable on
           releases of Android prior to 2.2 (Froyo).
                   Also, there has been at least one widely-observed bug in a popular handset from a major manufacturer, where every
           instance has the same ANDROID_ID.
                   If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
                   Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html

               => Lcom/huawei/android/airsharing/util/APSSID;->getDevId(Landroid/content/ContentResolver;)Ljava/lang/String; (0x4) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases.
                       Prior to Android 4.0, Android has SQLite Journal Information Disclosure Vulnerability.
                       But it can only be solved by users upgrading to Android > 4.0 and YOU CANNOT SOLVE IT BY YOURSELF (But you can use
           encrypt your databases and Journals by "SQLCipher" or other libs).
                       Proof-Of-Concept Reference:
                       (1) http://blog.watchfire.com/files/androidsqlitejournal.pdf
                       (2) http://www.youtube.com/watch?v=oCXLHjmH5rY
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
                   Please make sure do not use "file.delete()" to delete essential files.
                   Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Lcom/huawei/android/airsharing/version/VesionManager;->deleteFile(Ljava/lang/String;)Z (0x24) --->
                    Ljava/io/File;->delete()Z
               => Lcom/huawei/android/multiscreen/dlna/sdk/download/FileDownloader;->cancelDownload()V (0x56) ---> Ljava/io/File;->delete()Z
[Notice]  Native Library Loading Checking:
           Native library loading codes(System.loadLibrary(...)) found:
               [libdlnajni.so]
               => Lcom/huawei/android/multiscreen/dlna/sdk/jni/DlnaUniswitch;-><clinit>()V (0x12) --->
                    Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
[Notice] <System> AndroidManifest sharedUserId Checking:
           This app uses "android.uid.system" sharedUserId, which requires the "system(uid=1000)" permission. It must be signed with
           manufacturer's keystore or Google's keystore to be successfully installed on users' devices.
[Info]  AndroidManifest Adb Backup Checking:
           This app has disabled Adb Backup.
[Info] <Command> Executing "root" or System Privilege Checking:
           Did not find codes checking "root" permission(su) or getting system permission (It's still possible we did not find out).
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> Framework - MonoDroid:
           This app is NOT using MonoDroid Framework (http://xamarin.com/android).
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Did not detect codes for checking "ApplicationInfo.FLAG_DEBUGGABLE" in AndroidManifest.xml.
[Info] <Hacker> APK Installing Source Checking:
           Did not detect this app checks for APK installer sources.
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keysotre):
[Info] <KeyStore><Hacker> KeyStore Protection Checking:
           Ignore checking KeyStore protected by password or not because you're not using KeyStore.
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info] <Signature><Hacker> Getting Signature Code Checking:
           Did not detect this app is checking the signature in the code.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info] <Implicit_Intent> Implicit Service Checking:
           No dangerous implicit service.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info] <Sensitive_Information> Getting IMEI and Device ID:
           Did not detect this app is getting the "device id(IMEI)" by "TelephonyManager.getDeviceId()" approach.
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           Did not detect critical usage of "WebViewClient"(MITM Vulnerability).
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info] <WebView> WebView Local File Access Attacks Checking:
           Did not find potentially critical local file access settings.
[Info] <WebView> WebView Potential XSS Attacks Checking:
           Did not detect "setJavaScriptEnabled(true)" in WebView.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 1.043733 secs
Total elapsed time: 3.187645 secs
